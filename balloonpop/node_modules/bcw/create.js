#!/usr/bin/env node
let checkUpdate = require("./check-update");
let slugify = require('slugify');
let inquirer = require("inquirer");
let fs = require("fs");
let { execSync, exec } = require("child_process");
let { printAlert, printInfo, printSuccess, printWarning, colors, startSpinner, stopSpinner, clearScreen } = require('./console-utils')

const templates = [
  "mvc",
  "mvc-auth0",
  "node-server",
  "node-server-auth0",
  "vue-starter",
  "fullstack-vue"
];
const CURR_DIR = process.cwd();

//prompts and the name of properties added to the answers object
const prompts = [
  {
    name: "project-choice",
    type: "list",
    message: "What project template would you like to generate?",
    choices: templates
  },
  {
    name: "project-name",
    type: "input",
    message: "Project name:",
    validate(input) {
      return /^([A-Za-z\-\_\d])+$/.test(input)
        ? true
        : "Project name may only include letters, numbers, underscores and hashes.";
    }
  }
];

const authApps = {
  auth: ["node-server-auth0"],
  server: ["node-server", "node-server-auth0"]
}
// TODO 
// extract npm i to run automatically on all apps that need it 

async function createFullStack(projectName) {
  clearScreen();

  try {
    console.group(colors.FgMagenta, "---FULLSTACK_CREATION---")
    projectName = projectName.toLowerCase().replace(/\W/ig, '-')
    printWarning(`[PROJECT]: ${projectName}`)
    let projPath = `${CURR_DIR}/${projectName}`
    fs.mkdirSync(projPath)
    process.chdir(projPath)
    printInfo(`
--------------------
[+] CREATING PROJECT
[+] ${process.cwd()}`)
    execSync("node " + `"${__dirname}/node_modules/create-project" ${projectName}.client codeworks-templates/vue-starter`);
    execSync("node " + `"${__dirname}/node_modules/create-project" ${projectName}.server codeworks-templates/node-server-auth0`);
    let envContents = ["NODE_ENV=dev", "CONNECTION_STRING=", "PORT=", "AUTH_DOMAIN=", "AUTH_AUDIENCE=", "AUTH_CLIENT_ID="];
    fs.writeFileSync(`${projPath}/.gitignore`, "node_modules \n.env", "utf8");
    fs.writeFileSync(`${projPath}/${projectName}.server/.env`, envContents.join("\n"), "utf8");
    fs.writeFileSync(`${projPath}/${projectName}.code-workspace`, generateWorkspace(projectName), "utf8");
    fs.writeFileSync(`${projPath}/package.json`, generatePackageJson(projectName), "utf8");
    console.groupCollapsed(colors.FgMagenta, "[~] Installing Dependencies", colors.Reset)
    console.groupEnd()
    startSpinner()
    exec('npm run setup:app', (err, stdo, stderr) => {
      stopSpinner()
      printSuccess("[+] Project Created Successfully")
      console.groupEnd()
      printWarning(`
[#] Open Project Workspace
[#] cd into ${projectName} 
[#] type 'code ${projectName}.code-workspace'
`)
    })
  } catch (e) {
    console.groupEnd()
    printAlert(`[!] ${e}`)
  }
}

async function create() {
  inquirer.prompt(prompts).then(async answers => {
    let projectChoice = answers["project-choice"];
    let projectName = answers["project-name"];
    // @ts-ignore
    projectName = slugify(projectName);

    if (projectChoice === 'fullstack-vue') {
      return await createFullStack(projectName)
    }

    let hasAuth = false;
    let isServer = false;
    try {
      // @ts-ignore
      hasAuth = authApps.auth.includes(projectChoice);
      // @ts-ignore
      isServer = authApps.server.includes(projectChoice);

      let projPath = `${CURR_DIR}/${projectName}`
      try {
        execSync("node " + `"${__dirname}/node_modules/create-project" ${projectName} codeworks-templates/${projectChoice}`);
      } catch (e) {
        printAlert("[ERROR] Invalid Template" + e.message);
        return;
      }
      console.log(`cd into ${projectName}`);

      if (isServer) {
        fs.writeFileSync(`${projPath}/.gitignore`, "node_modules \n.env", "utf8");
        let envContents = ["NODE_ENV=dev", "CONNECTION_STRING=", "PORT="];
        if (hasAuth) {
          envContents.push("AUTH_DOMAIN=", "AUTH_AUDIENCE=", "AUTH_CLIENT_ID=");
        }
        fs.writeFileSync(`${projPath}/.env`, envContents.join("\n"), "utf8");
        return console.log(`run npm i to install dependencies`);
      }
    } catch (e) {
      printAlert("[UKNOWN ERROR]", e.toString())
    }
  });
}


async function start() {
  try {
    await checkUpdate()
  } catch (e) {
    console.error(e)
  }
  try {
    await create()
  } catch (e) {
    console.error(e)
  }
}

function generatePackageJson(projectName) {
  return `
  {
    "name": "${projectName}",
    "version": "1.0.0",
    "scripts": {
      "setup:app": "npm run setup:client && npm run setup:server",
      "setup:client": "cd ${projectName}.client && npm i",
      "setup:server": "cd ${projectName}.server && npm i",
      "start": "node ${projectName}.server/index.js"
    },
    "engines": {
      "node": "^14.17.0"
    }
  }
  `
}
function generateWorkspace(projectName) {
  return `
{
  "folders": [
    {
      "path": "${projectName}.client",
      "name": "client"
    },
    {
      "path": "${projectName}.server",
      "name": "server"
    }
  ],
  "settings": {
    "editor.suggestSelection": "first",
    "git.enableSmartCommit": true,
    "git.confirmSync": false,
    "git.autofetch": true,
    "javascript.referencesCodeLens.enabled": true,
    "javascript.referencesCodeLens.showOnAllFunctions": true,
    "typescript.implementationsCodeLens.enabled": true,
    "typescript.referencesCodeLens.enabled": true,
    "typescript.referencesCodeLens.showOnAllFunctions": true,
    "js/ts.implicitProjectConfig.checkJs": true,
    "files.exclude": {
      "**/.nyc_*": true,
      "**/coverage": true,
      "**/node_modules": true
    },
    "javascript.updateImportsOnFileMove.enabled": "always",
    "explorer.confirmDragAndDrop": false,
    "vetur.format.defaultFormatter.js": "vscode-typescript",
    "eslint.alwaysShowStatus": true,
    "eslint.format.enable": true,
    "eslint.lintTask.enable": true,
    "eslint.codeActionsOnSave.mode": "all",
    "editor.codeActionsOnSave": {
      "source.fixAll": true
    }
  }
}`
}

start()
